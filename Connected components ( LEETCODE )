// Connected components ( LEETCODE )

class Solution {
public:
    void dfs(int i, vector<int>& visited, vector<int> adj[]) {
        visited[i] = 1;
        for (int it : adj[i]) {
            if (visited[it] != 1) {
                dfs(it, visited, adj);
            }
        }
    }

    int countComponents(int n, vector<vector<int>>& edges) {
        vector<int> adj[n];
        // Adjacency list
        for (int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int> visited(n);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] != 1) {
                count++;
                dfs(i, visited, adj);
            }
        }
        return count;
    }
};
