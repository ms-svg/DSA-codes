// Count inversion

int merge(vector<int> &arr, int low,int mid,int high){
    vector<int> temp;
    int left = low;
    int right = mid+1;
    int count = 0;
    
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            count += (mid-left+1);
            right++;
        }
    }
    
    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }

}


// Time complexity = O(nlogn)
// Space complexity =  O(n) // for taking temp array.

