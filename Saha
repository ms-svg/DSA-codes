from collections import defaultdict

3 def solve(N, M, enemy):

#Create an adjacency list to represent the graph

:D

10%

#Initialize two sets to represent the two groups

group1 11 set()

group2 12 set()

#Function to perform a depth-first search to divide the students into groups 14

def dfs(node, group): 15

if node in group: 16

return True

for neighbor in graph [node]:

if neighbor in group:

return False

5

graph 6 for u, v in enemy:

defaultdict(list)

7

graph [u].append(v)

B

graph[v].append(u)

9 10

13

17

18

19

20

21 group.add(node)

22

23

24

25 return True

26

27 #Try to divide the students into two groups

28 for student in range(1, N+1):

29

30

31

32

33 34 max_group_size = max(len(group1), len(group2))

35 36 return max_group_size

37

for neighbor in graph [node]:

if not dfs(neighbor, group):

return False

if student not in group1 and student not in group2:

if not dfs(student, group1):

dfs(student, group2)

#Calculate the maximum size of the groups

38 # Input reading and function call

39 if name="main":

40 41 Nint(input()) Mint(input())

42 enemy = []

43 for in range(M):

44 u, v map(int, input().split())

45 46 enemy.append((u, v))

47 result solve(N, M, enemy)

48 print(result)

49

Explanation:
