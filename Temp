#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int maxTrophiesFromStart(int n, int m, vector<vector<char>>& matrix, int x, int y,vector<vector<int>>& vis,int chance) {
    int maxTrophies = 0;
    
    // {node,trophy},chance
    queue<vector<int>> q;
    vector<vector<int>> visited(n, vector<int>(m, 0));
    if(matrix[x][y]=='*'){
        vector<int> adb = {x,y,1,1};
    q.push(adb); 
    }
    else{
        vector<int> adb = {x,y,0,1};
    q.push(adb); }
    visited[x][y] = 1;
    while (!q.empty()) {
        vector<int> nums  = q.front().
        int row = nums[0];
        int col = nums[1];
        int trophyCount = nums[2];
        int chance = nums[3];
        maxTrophies = max(maxTrophies,trophyCount);
        q.pop();
        
        int dx[] = {-1,0,1,0};
        int dy[] = {0,-1,0,1};
        
        for(int i=0;i<4;i++){
            
            int newR = row + dx[i];
            int newC = col + dy[i];
            
            if(newR >= 0 && newC >= 0 && newR < n && newC < m && visited[newR][newC]==-1){
                
                if(matrix[newR][newC]=='#'){
                    
                    if(chance == 1){
                        
                        q.push({newR,newC,trophyCount,0});
                    }
                    else{
                        continue;
                    }
                }
                else{
                    
                    if(matrix[newR][newC]=='*'){
                        
                        q.push({newR,newC,trophyCount + 1,1});
                    }
                    else{
                        q.push({newR,newC,trophyCount,1});
                    }
                }
                
            }
        }
    }
    //maxTrophies = trophies + walls;
    return maxTrophies;
}

int main() {
    int n, m;
    cout << "Enter the value of n: ";
    cin >> n;
    cout << "Enter the value of m: ";
    cin >> m;

    vector<vector<char>> matrix(n, vector<char>(m));

    // Take input for the matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << "Enter element at position [" << i << "," << j << "]: ";
            char c;
            cin >> c;
            if (c != '*' && c != '#' && c != '.') {
                cout << "Invalid input. Please enter *, #, or .\n";
                j--; // go back to the previous iteration
            } else {
                matrix[i][j] = c;
            }
        }
    }

    int maxTrophyCount = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == '*' || matrix[i][j] == '.') {
                vector<vector<int>> vis(n,vector<int>(m,-1));
                int trophies = maxTrophiesFromStart(n, m, matrix, i, j,vis,1);
                maxTrophyCount = max(maxTrophyCount, trophies);
            }
        }
    }

    cout << "Maximum number of trophies that can be collected: " << maxTrophyCount << endl;

    return 0;
}
