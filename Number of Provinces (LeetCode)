class Solution {
public:

    void dfs(int visited[],int start, vector<int> adj[]){
        visited[start]=1;
        for(auto it:adj[start]){
            if(visited[it]==0){
                dfs(visited,it,adj);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {

        int n=isConnected.size();
        // Creating Adjacency List
        vector<int> adj[isConnected.size() + 1];

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1){
                    adj[i+1].push_back(j+1);
                    adj[j+1].push_back(i+1);
                }
            }
        }

        int count=0;
        int visited[n+1];

        for(int i=1;i<=n;i++){
            visited[i]=0;
        }
        for(int i=1;i<=n;i++){
            if(visited[i]==0){
                count+=1;
                dfs(visited,i,adj);
            }
        }
        return count;

    }
};
