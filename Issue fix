#include <bits/stdc++.h>
using namespace std;

long long evaluateExpression(const string& expr) {
    istringstream iss(expr);
    long long result = 0;
    string sam = "";
    for (char ch : expr) {
        if (ch == '+') {
            result += stoll(sam);
            sam = "";
        } else {
            sam.push_back(ch);
        }
    }
    result += stoll(sam); // Add the last number
    return result;
}

vector<tuple<long long, string, int>> generateExpressions(const string& digits) {
    int n = digits.size();
    vector<tuple<long long, string, int>> results;
    int numCombinations = 1 << (n - 1);
    for (int i = 0; i < numCombinations; ++i) {
        string expression;
        expression += digits[0];
        int plusCount = 0;
        for (int j = 0; j < n - 1; ++j) {
            if (i & (1 << j)) {
                expression += '+';
                plusCount++;
            }
            expression += digits[j + 1];
        }
        long long result = evaluateExpression(expression);
        results.push_back(make_tuple(result, expression, plusCount));
    }
    return results;
}

bool customComparator(const tuple<long long, string, int>& a, const tuple<long long, string, int>& b) {
    if (get<0>(a) == get<0>(b)) {
        if (get<1>(a) == get<1>(b)) {
            return get<2>(a) < get<2>(b);
        }
        return get<1>(a) < get<1>(b);
    }
    return get<0>(a) < get<0>(b);
}

int main() {
    int testcases;
    cin >> testcases;
    while (testcases--) {
        int n;
        cin >> n;
        string x;
        cin >> x;
        vector<int> values(n);
        for (int i = 0; i < n; i++) {
            int input;
            cin >> input;
            values[i] = input;
        }
        vector<tuple<long long, string, int>> results = generateExpressions(x);
        sort(results.begin(), results.end(), customComparator);
        vector<tuple<long long, string, int>> prefinal;
        for (int i = 0; i < values.size(); i++) {
            int idx = values[i];
            prefinal.push_back(results[idx - 1]);
        }
        long long finalSum = 0;
        int countPlus = 0;
        for (const auto& res : prefinal) {
            finalSum += get<0>(res);
            countPlus += get<2>(res);
        }
        cout << finalSum << " " << countPlus << endl;
    }
    return 0;
}
