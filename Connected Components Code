#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void dfs(int start, int end, vector<int> adj[], int visited[]) {
    visited[start] = 1;
    cout<<start<<endl;
   
        for (auto it : adj[start]) {
            if (visited[it] == 0) {
                dfs(it,end,adj,visited);
            }
        }
}

int main() {
    // Enter number of nodes;
    int n;
    cin >> n;
    // Enter number of edges;
    int e;
    cin >> e;

    // Instantiating adjacency list of size[n+1]
    vector<int> adj[n + 1];

    // We need to store the edges in list
    for (int i = 0; i < e; i++) {
        // Enter every edges coordinates ( u, v )
        int u, v;
        cin >> u >> v;
   
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    
    int count = 0;
    int visited[n + 1]={0};
    
    for (int i = 1; i <= n; i++) {
        if (visited[i] == 0) {
            count++;
            dfs(i, n, adj, visited);
        }
    }
    cout << "Answer is " << count << endl;
    return 0;
}
