// Graph Traversals
// Code for DFS traversal for given graph

#include <iostream>
#include <vector>
#include <queue>
using namespace std;


void bfs(int start, int visited[], vector<int> adj[]){
    visited[start]=1;
    queue<int> qu;
    qu.push(start);
    
    while(!qu.empty()){
        int pops=qu.front();
        visited[pops]=1;
        qu.pop();
        cout<<pops<<endl;
        for(int it : adj[pops]){
            if(visited[it]==0){
                qu.push(it);
            }
        }
    }
}



void dfs(int start, int visited[], vector<int> adj[]){
    visited[start]=1;
    cout<<start<<" ";
    for(auto it:adj[start]){
        if(visited[it]==0){
            dfs(it,visited,adj);
        }
    }

}

int main() {
    // Enter number of nodes;
    int n;
    cin >> n;
    // Enter number of edges;
    int e;
    cin >> e;
    
    vector<int> adj[n+1];
    
    for(int i=0;i<e;i++){
        int u;
        int v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int visited[n+1]={0};
    cout<<"dfs"<<endl;
    dfs(1,visited,adj);
    cout<<endl;
    cout<<"bfs"<<endl;
    int visited2[n+1]={0};
    bfs(1,visited2,adj);
    
    return 0;
}
